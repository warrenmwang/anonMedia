// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: posts.sql

package sqlc

import (
	"context"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts 
(author_id, title, body) VALUES ($1, $2, $3)
`

type CreatePostParams struct {
	AuthorID string
	Title    string
	Body     string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.db.ExecContext(ctx, createPost, arg.AuthorID, arg.Title, arg.Body)
	return err
}

const getPosts = `-- name: GetPosts :many
SELECT id, author_id, title, body FROM posts 
LIMIT $1 OFFSET $2
`

type GetPostsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetPosts(ctx context.Context, arg GetPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.AuthorID,
			&i.Title,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
